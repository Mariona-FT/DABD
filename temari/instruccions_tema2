Instruccions classe teoria tema 2:

Problema: Màquines de la factoria, I
Una factoria immensa té una elevada quantitat de màquines. De
cadascuna tenim el número amb que està inventariada i el seu
fabricant.
Periòdicament, un tècnic supervisa individualment cada màquina.
Cada tècnic, de qui coneixem el DNI i les seves dades personals,
coneix la distribució de la seva setmana laboral en franjes horàries
amb la indicació de quina màquina ha de supervisar en cadascuna
d’aquestes franges.

Classes-taules:

TÉCNICS 1.*____________________	0.* MÀQUINES---construides-----FABRICANT
- DNI			|	- id_maquina			-nom
- DadesPersonals	|	
			|
		SUPERVISIÓ
		-franja
		
INCORRECTE: només pot haver-hi UNA supervisió entre tecnics i màquines en tota la vida
+la franja es una llista limitada de hores - ha de ser una classe sola

SUPERVISIÓ 1.*____________________0.* MÀQUINES---construides-----FABRICANT
- franja		|	- id_maquina			-nom
			|	
			|
			TÉCNIC
			-DNI
			-DadesPersonals

MILLOR SI --> Supervisió dividia amb els tècnics

SUPERVISIÓ 0.*____________________0.* MÀQUINES
- franja		|	- id_maquina
			|	-fabrica
			|	
			|
			SUPERVISIÓ 0.*________1 TECNIC
						-DNI
						-DadesPersona

Creació de taules: (sense fabricant)

maq- maquina
evsup-supervisio
tec-tecnic

CREATE TABLE tec
	(dni int PRIMARY KEY NOT NULL, dp text);
CREATE TABLE maq
	(ninv int PRIMARY KEY NOT NULL, fab text);
CREATE TABLE evsup
	(fh text PRIMARY KEY NOT NULL);
CREATE TABLE supervisio (
	fh text NOT NULL
		REFERENCES evsup ON UPDATE CASCADE,
	ninv int NOT NULL
		REFERENCES maq ON UPDATE CASCADE,
	dni int NOT NULL
		REFERENCES tec ON UPDATE CASCADE,
	PRIMARY KEY(fh,dni), UNIQUE(fh,ninv));


Creació un altre exemple:

Estructura:

CIUTATS 1_____1.* CLIENTS
-codi 		 -dni
-nom		 -nom	
		

Creació de taules:
		
CREATE TABLE CIUTATS (
	codi INT PRIMARY KEY,
	num VARCHAR(90) NOT NULL
	);

CREATE TABLE CLIENTS (
	dni TEXT PRIMARY KEY,
	nom VARCHAR(90) NOT NULL
	codi_ciutats INT REFERENCE CIUTATS.codi
	);
	
relació entre taules --> codi_ciutats INT REFERENCE CIUTATS.codi
 les relacions sempre han de relacionar a una clau primaria d'una altre classe
 

Hi han CIUTATS mateix nom en DIFERENTS PAISOS

Re Estructura:
PAISOS 1 ___1.*	CIUTATS 1_____1.* CLIENTS
-nom 		 -dni
		 -nom	
		

Creació de taules:
CREATE TABLE PAISOS (
	codi INT PRIMARY KEY,
	num VARCHAR(90) NOT NULL
	);
			
CREATE TABLE CIUTATS (
	codi INT PRIMARY KEY,
	num VARCHAR(90) NOT NULL
	);

CREATE TABLE CLIENTS (
	dni TEXT PRIMARY KEY,
	nom VARCHAR(90) NOT NULL
	codi_ciutats INT REFERENCE CIUTATS.codi
	);
	
	
Re Estructura:

CREATE TABLE ciutat(
	nom ciutat VARCHAR(50) NOT NULL,
	nom pais VARCHAR(20) NOT NULL,
	PRIMARY KEY(nom ciutat, nom pais));

CREATE TABLE client (
codi CHAR(8) NOT NULL PRIMARY KEY,
	nom ciutat VARCHAR(50) NOT NULL,
	nom pais VARCHAR(20) NOT NULL,
	FOREIGN KEY (nom ciutat, nom pais) REFERENCES ciutat);
	

DEPENDÈNCIES FUNCIONALS:

DP: dades personals
N.Inv: numero inventari - maquina
FH: franja horària
Fab: fabricant

- DNI → D.P.
- N.Inv. → Fab
- DNI F.H. → N.Inv.
- N.Inv. F.H. → DNI


Variables:
 * Periòdicament, tècnics competents supervisen cada màquina, possiblement en equip.
- DNI → D.P.
- N.Inv. → Fab
- DNI F.H. → N.Inv.
- N.Inv. F.H. /→ DNI (ja no es pot determinar un sol dni d'un sol fabricant pq ja no sera un sol revisant una màquina)
cal treure la clau alternativa UNIQUE(fh,ninv), també està en BCNF i, per tant, en 3NF.


* Cada màquina té assignat un tècnic, sempre el mateix, que, de manera individual, la supervisa.
- DNI → D.P.
- N.Inv. → Fab
- DNI F.H. → N.Inv.
- N.Inv. F.H. -/→ DNI
- N.Inv.→ DNI (no cal saber la franja horària pq sempre sera el mateix fa tecninc que estarà associat en una màquina )

* Cada màquina té assignat un tècnic, sempre el mateix, que, de manera individual, la supervisa setmanalment.
- DNI → D.P.
- N.Inv. → Fab
- DNI F.H. → N.Inv.
- N.Inv. F.H. -/→ DNI
- N.Inv.→ DNI (no cal saber la franja horària pq sempre sera el mateix fa tecninc que estarà associat en una màquina )
- N.Inv → FH  (per aixi tenir la franja horària que es supervisa la màquina)

Polítiques CLAUS FORANES: 
	ON DELETE
- CASCADE: Utilitza aquesta opció si vols que l'eliminació d'una fila en la taula pare porti a l'eliminació automàtica de totes les files relacionades en la taula filla. Això és útil quan la presència de la fila filla no té sentit sense la fila pare.

- SET NULL: Escolleix aquesta opció si les files filles poden romandre sense una relació amb la fila pare. Això pot deixar la fila filla en un estat 'òrfena', el que pot ser adequat en alguns casos, com per exemple, quan una relació no és estricte.

- RESTRICT / NO ACTION: Utilitza aquestes opcions si no vols que la fila pare sigui eliminada quan hi ha files filles relacionades. Aquesta és la opció més segura per prevenir la pèrdua accidental de dades.

- SET DEFAULT: Utilitza aquesta opció per establir un valor predeterminat a la clau forana en les files filles quan la fila pare és eliminada. Aquesta opció no és tan comuna i requereix que s'hagi definit un valor predeterminat.

ON UPDATE
- CASCADE: Aquesta opció és útil quan el valor de la clau forana en la fila filla ha de correspondre sempre al valor de la clau primària en la fila pare. Això és comú en identificadors que canvien rarament, com ara IDs numèrics autoincrementats.

- NO ACTION: Escull aquesta opció quan els canvis en la clau primària de la taula pare no s'haurien de reflectir en la taula filla. Això és útil quan el valor de la clau forana en la fila filla no depèn directament del valor actual de la clau primària en la fila pare.

Dades Històriques: Si és important mantenir un registre històric, inclús després que l'element relacionat ha estat eliminat, ON DELETE SET NULL o NO ACTION poden ser les millors opcions.

Integritat de Dades: Si les dades han de romandre consistents i cada fila filla ha de tenir una fila pare corresponent vàlida en tot moment, llavors CASCADE o RESTRICT són opcions a considerar.
